OBJDIR := obj
INCLUDE := include
BINDIR := bin
SRCDIR := src
FRONTEND_INCLUDE := frontend/include
FRONTEND_SRCDIR := frontend/src
CHISEL := proc_tree.lua

CHISELDIR := $(DESTDIR)/usr/share/sysdig/chisels
LOGSDIR := /var/log/debugger

INCLUDES := $(INCLUDE) $(OBJDIR) $(FRONTEND_INCLUDE)

# variables that contain all the cpp files
BACKEND_SRCS := $(shell find $(SRCDIR) -name "*.cpp")
FRONTEND_SRCS := $(shell find $(FRONTEND_SRCDIR) -name "*.cpp")

# variables that contain all objects generated by cpp files
BACKEND_OBJS := $(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%.o,$(BACKEND_SRCS))
FRONTEND_OBJS := $(patsubst $(FRONTEND_SRCDIR)/%.cpp,$(OBJDIR)/%.o,$(FRONTEND_SRCS))

MAIN = main

# BPF variables
BPF_SRC := $(SRCDIR)/bpf
BPF_SRCS := $(wildcard $(BPF_SRC)/*.bpf.c)
BPF_INCLUDES := $(INCLUDES)
BPF_OBJS := $(patsubst $(BPF_SRC)/%.bpf.c,$(OBJDIR)/%.bpf.o,$(BPF_SRCS))
BPF_TRACER := tracer.bpf.o
BPF_SKELETON := tracer.skel.h

# tools
CXX := clang++
CLANG ?= clang
LLVM_STRIP ?= llvm-strip
BPFTOOL := bpftool
VMLINUX := vmlinux.h
ARCH := $(shell uname -m | sed 's/x86_64/x86/' | sed 's/aarch64/arm64/' | sed 's/ppc64le/powerpc/' | sed 's/mips.*/mips/')

# flags
IFLAGS := $(patsubst %,-I%,$(INCLUDES))
CXXFLAGS := -Wall -std=c++20 -D CHISEL="\"$(CHISEL)\"" -D LOGSDIR="\"$(LOGSDIR)\""
DEBUG_CXXFLAGS := -g -fsanitize=address
# to add debug flags, uncomment the next line
# CXXFLAGS += $(DEBUG_CXXFLAGS)
ALL_LDFLAGS := $(LDFLAGS) $(EXTRA_LDFLAGS)
BPF_IFLAGS := $(patsubst %,-I%,$(BPF_INCLUDES))

# Get Clang's default includes on this system. We'll explicitly add these dirs
# to the includes list when compiling with `-target bpf` because otherwise some
# architecture-specific dirs will be "missing" on some architectures/distros -
# headers such as asm/types.h, asm/byteorder.h, asm/socket.h, asm/sockios.h,
# sys/cdefs.h etc. might be missing.
#
# Use '-idirafter': Don't interfere with include mechanics except where the
# build would have failed anyways.
CLANG_BPF_SYS_INCLUDES = $(shell $(CLANG) -v -E - </dev/null 2>&1 \
	| sed -n '/<...> search starts here:/,/End of search list./{ s| \(/.*\)|-idirafter \1|p }')

.PHONY: all clean chisel
all: $(BINDIR)/$(MAIN)

# cleanup
.PHONY: clean
clean:
	rm -rf $(OBJDIR) $(BINDIR)

# installs chisel, so that sysdig can find it
chisel:
	cp $(SRCDIR)/$(CHISEL) $(CHISELDIR)

# create vmlinux.h
$(OBJDIR)/$(VMLINUX):
	@mkdir -p $(dir $@)
	$(BPFTOOL) btf dump file /sys/kernel/btf/vmlinux format c > $@

# Build BPF code
$(BPF_OBJS): $(OBJDIR)/%.o: $(BPF_SRC)/%.c $(OBJDIR)/$(VMLINUX)
	@mkdir -p $(dir $@)
	$(CLANG) -g -O3 -target bpf -D__TARGET_ARCH_$(ARCH) $(BPF_IFLAGS) $(CLANG_BPF_SYS_INCLUDES) -c $(filter %.c,$^) -o $@
	$(LLVM_STRIP) -g $@ # strip useless DWARF info

# Combine BPF objects
$(OBJDIR)/$(BPF_TRACER): $(BPF_OBJS)
	@mkdir -p $(dir $@)
	$(BPFTOOL) gen object $@ $^

# Generate BPF skeleton
$(OBJDIR)/$(BPF_SKELETON): $(OBJDIR)/$(BPF_TRACER)
	@mkdir -p $(dir $@)
	$(BPFTOOL) gen skeleton $< > $@

# Generic rule to create objects from cpp files
$(BACKEND_OBJS): $(OBJDIR)/%.o: $(SRCDIR)/%.cpp $(OBJDIR)/$(BPF_SKELETON)
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) $(IFLAGS) -MMD -MP -c $< -o $@

# Generic rule to create objects from cpp files
$(FRONTEND_OBJS): $(OBJDIR)/%.o: $(FRONTEND_SRCDIR)/%.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) $(IFLAGS) -MMD -MP -c $< -o $@

# Build application binary
$(BINDIR)/$(MAIN): $(FRONTEND_OBJS) $(BACKEND_OBJS)
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) $^ $(ALL_LDFLAGS) -lbpf -lelf -lfmt -lz -o $@

# delete failed targets
.DELETE_ON_ERROR:

# keep intermediate (.skel.h, .bpf.o, etc) targets
.SECONDARY:
